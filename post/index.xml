<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Alexey Smirnov</title>
    <link>https://smirnov-am.github.io/post/</link>
    <description>Recent content in Posts on Alexey Smirnov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; Alexey Smirnov 2020</copyright>
    <lastBuildDate>Tue, 12 Jan 2021 23:03:00 +0000</lastBuildDate>
    
	<atom:link href="https://smirnov-am.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Replacing background in video with OpenCV/C&#43;&#43;</title>
      <link>https://smirnov-am.github.io/matting/</link>
      <pubDate>Tue, 12 Jan 2021 23:03:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/matting/</guid>
      <description>Separating a foreground element of an image from its background for later compositing into a new scene is one of the most basic and common tasks in visual effects production. This problem is typically called matting when applied to film, or keying when applied to video.
In this demo you can see how a church in the foreground is separated from the background blue sky, which was later replaced with a sky full of stars.</description>
    </item>
    
    <item>
      <title>How to become a Python developer</title>
      <link>https://smirnov-am.github.io/how-to-become-python-developer/</link>
      <pubDate>Mon, 21 Dec 2020 18:41:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/how-to-become-python-developer/</guid>
      <description>In this post I present a Python software developer study plan. It consists of these 8 not-so-easy steps:
 Pick a project Choose tech specialization Learn Python basics Practice programming Learn the ecosystem Study computer science Prepare yourself for the job Find a mentor  Why I&amp;rsquo;m writing that One of my former colleagues asked me a how to become a Python developer. Of course, there are thousands of courses, boot camps and different programs helping people to start a developer career.</description>
    </item>
    
    <item>
      <title>Chroma Keying with OpenCV/C&#43;&#43;</title>
      <link>https://smirnov-am.github.io/chromakeying/</link>
      <pubDate>Wed, 14 Oct 2020 23:03:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/chromakeying/</guid>
      <description>Chroma keying - or blue/green screen matting - is a process of removing a specific color from the video to be replaced with another picture or video. Historically green or blue colors were used as a background because they are not dominant in human skin or clothes. However, when a weather forecaster puts on a green skirt it can lead to funny situations:
Chroma keying became very popular technique not only on TV but in the movies.</description>
    </item>
    
    <item>
      <title>Uploading files to AWS S3 with Flask</title>
      <link>https://smirnov-am.github.io/flask-s3/</link>
      <pubDate>Mon, 14 Sep 2020 23:03:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/flask-s3/</guid>
      <description>One way to upload files using Flask is to literally create a route that accepts HTTP POST and saves bytes received on the disk.
And with horizontal scaling you need to mount an external storage to every running instance that supports replication.
Another option is to use object storage - like AWS S3 - and upload files directly from the frontend. In that case Flask will have a route that just generates and URL a frontend will upload to.</description>
    </item>
    
    <item>
      <title>Advanced fixtures with pytest</title>
      <link>https://smirnov-am.github.io/pytest-advanced-fixtures/</link>
      <pubDate>Sun, 06 Sep 2020 18:41:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/pytest-advanced-fixtures/</guid>
      <description>Other pytest articles:
Why testing is important
Types of tests
Test driven Development
Hello, World!
Selecting tests with pytest
Testing HTTP client with pytest
Testing database with pytest
Advanced fixtures with pytest
Pytest plugins
Now let’s create another test - it will test integration between our 2 components that talk to external systems - API and database cache. Let’s test that when we query a number twice - we call API only once that the result is saved to the database and fetched from it on the second call.</description>
    </item>
    
    <item>
      <title>Hello, World!</title>
      <link>https://smirnov-am.github.io/pytest-hello-world/</link>
      <pubDate>Sun, 06 Sep 2020 18:41:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/pytest-hello-world/</guid>
      <description>Other pytest articles:
Why testing is important
Types of tests
Test driven Development
Hello, World!
Selecting tests with pytest
Testing HTTP client with pytest
Testing database with pytest
Advanced fixtures with pytest
Pytest plugins
In this course, we will be working on a mobile phone number validation application.
The application: - Accepts a number as input - For every number in the list - Normalize the number - Check cache if this number was validated before - If it’s not in cache call external service REST API to validate the number - print the normalized number and the result of validation</description>
    </item>
    
    <item>
      <title>Pytest plugins</title>
      <link>https://smirnov-am.github.io/pytest-plugins/</link>
      <pubDate>Sun, 06 Sep 2020 18:41:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/pytest-plugins/</guid>
      <description>Other pytest articles:
Why testing is important
Types of tests
Test driven Development
Hello, World!
Selecting tests with pytest
Testing HTTP client with pytest
Testing database with pytest
Advanced fixtures with pytest
Pytest plugins
There are lot of plugins in pytest ecosystem. Some of the widely used are listed here All the plugins can be installed with pip and invoked by providing an argument to pytest executable.
pytest-cov This plugin calculates test coverage - how much of our code is covered by test.</description>
    </item>
    
    <item>
      <title>Selecting tests with pytest</title>
      <link>https://smirnov-am.github.io/pytest-selecting_tests/</link>
      <pubDate>Sun, 06 Sep 2020 18:41:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/pytest-selecting_tests/</guid>
      <description>Other pytest articles:
Why testing is important
Types of tests
Test driven Development
Hello, World!
Selecting tests with pytest
Testing HTTP client with pytest
Testing database with pytest
Advanced fixtures with pytest
Pytest plugins
Let&amp;rsquo;s add another requirement for our normalize function - it will raise an exception if the number contains a letter, or if a plus sign is not at the beginning.
Now let’s think a bit about the design of the application.</description>
    </item>
    
    <item>
      <title>Test driven Development</title>
      <link>https://smirnov-am.github.io/pytest-tdd/</link>
      <pubDate>Sun, 06 Sep 2020 18:41:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/pytest-tdd/</guid>
      <description>Other pytest articles:
Why testing is important
Types of tests
Test driven Development
Hello, World!
Selecting tests with pytest
Testing HTTP client with pytest
Testing database with pytest
Advanced fixtures with pytest
Pytest plugins
Is it better to write test cases after the code has been written or beforehand? Usually, it’s cheaper to detect bugs as early as possible in the development process. And writing test cases first will minimize the time between when a defect is inserted into the code and when the defect is detected and removed.</description>
    </item>
    
    <item>
      <title>Testing database with pytest</title>
      <link>https://smirnov-am.github.io/pytest-testing_database/</link>
      <pubDate>Sun, 06 Sep 2020 18:41:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/pytest-testing_database/</guid>
      <description>Other pytest articles:
Why testing is important
Types of tests
Test driven Development
Hello, World!
Selecting tests with pytest
Testing HTTP client with pytest
Testing database with pytest
Advanced fixtures with pytest
Pytest plugins
We are going to use a database in our number testing application as a cache for API call results - API calls can be costly and we don’t want to check the same number twice against it.</description>
    </item>
    
    <item>
      <title>Testing HTTP client with pytest</title>
      <link>https://smirnov-am.github.io/pytest-testing_http_client/</link>
      <pubDate>Sun, 06 Sep 2020 18:41:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/pytest-testing_http_client/</guid>
      <description>Other pytest articles:
Why testing is important
Types of tests
Test driven Development
Hello, World!
Selecting tests with pytest
Testing HTTP client with pytest
Testing database with pytest
Advanced fixtures with pytest
Pytest plugins
Now let’s move to checking if the number exists or not. For that, we are going to employ a 3rd party API. According to API docs: - It’s a REST API - We need to use HTTP GET - We provide a number in query parameters - The result is a json {‘existing’: True | False}</description>
    </item>
    
    <item>
      <title>Types of tests</title>
      <link>https://smirnov-am.github.io/pytest-test-types/</link>
      <pubDate>Sun, 06 Sep 2020 18:41:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/pytest-test-types/</guid>
      <description>Other pytest articles:
Why testing is important
Types of tests
Test driven Development
Hello, World!
Selecting tests with pytest
Testing HTTP client with pytest
Testing database with pytest
Advanced fixtures with pytest
Pytest plugins
There are many types of tests. Brian Marick came up with this chart, which is widely used to show which types you should care about in order to deliver a high-quality application.
In this diagram, he categorized tests according to whether they are business-facing or technology-facing, and whether they support the development process or are used to critique the project.</description>
    </item>
    
    <item>
      <title>Why testing is important</title>
      <link>https://smirnov-am.github.io/pytest-why-testing/</link>
      <pubDate>Sun, 06 Sep 2020 18:41:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/pytest-why-testing/</guid>
      <description>Other pytest articles:
Why testing is important
Types of tests
Test driven Development
Hello, World!
Selecting tests with pytest
Testing HTTP client with pytest
Testing database with pytest
Advanced fixtures with pytest
Pytest plugins
Testing makes our code flexible, reliable and reusable.
Flexible If you don’t have tests for your code - every change to the code is a possible bug. Thus, developers fear making changes and implementing new features, no matter how flexible the architecture of the application is.</description>
    </item>
    
    <item>
      <title>Producer consumer pattern for fast data pipelines</title>
      <link>https://smirnov-am.github.io/producer-consumer/</link>
      <pubDate>Sun, 23 Aug 2020 22:41:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/producer-consumer/</guid>
      <description>Let&amp;rsquo;s build a simple data pipeline. It will read a SOURCE table in MySQL database. This table has only one column VALUES and contains 1000 rows - numbers from 1 to 1000. The application will calculate square root of the number and put the result in DESTINATION table. This table will have 2 columns - VALUE column holding original number - ROOT column for the result of calculation
Very simple implementation of this pipeline can be like this one:</description>
    </item>
    
    <item>
      <title>Speeding up Python code with Cython</title>
      <link>https://smirnov-am.github.io/cython/</link>
      <pubDate>Thu, 13 Aug 2020 18:41:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/cython/</guid>
      <description>Cython is an extension of Python, that adds static typing to variables, functions and classes. It combines simplicity of Python and efficiency of C. You can rewrite your code in Cython and compile them to C to achieve higher execution speed.
In this tutorial, you’ll learn how to:
 Install Cython and Compile Cython code something about speed Write Cython application with statically typed variables and C functions  What Cython is and what it&amp;rsquo;s used for The Cython project consists of two parts - a programming language and a compiler.</description>
    </item>
    
    <item>
      <title>Accepting payments in Flask with Stripe</title>
      <link>https://smirnov-am.github.io/flask-stripe/</link>
      <pubDate>Thu, 09 Jul 2020 23:03:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/flask-stripe/</guid>
      <description>Introduction In this article you&amp;rsquo;ll learn how to use Stripe Checkout to accept one time payments in Flask application. THe example will be a webshop, that has a single page for selling 5$ T-shirts.
Main page Create a Flask route that serves the webshop page.
The page loads some JavaScript as well: - a Stripe JS - jQuery for AJAX call - some custom JavaScript
@app.route(&#39;/&#39;) def webshop(): return &amp;quot;&amp;quot;&amp;quot;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;a href=&amp;quot;#&amp;quot; id=&amp;quot;checkout&amp;quot;&amp;gt;Buy T-shirt for 5$&amp;lt;/a&amp;gt; &amp;lt;script src=&amp;quot;https://code.</description>
    </item>
    
    <item>
      <title>How to increase Flask performance</title>
      <link>https://smirnov-am.github.io/flask-perf/</link>
      <pubDate>Thu, 07 May 2020 23:03:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/flask-perf/</guid>
      <description>When Flask app runs slow we need to identify what is the bottleneck. It can be an overloaded database, unresponsive external API, or heavy, CPU-intensive computation. This is the whole recipe on how to speed up Flask - find the source of sluggish performance. After the bottleneck is identified you can fight an underlying cause.
And here I assume that the underlying platform that runs Flask has enough resources to do so.</description>
    </item>
    
    <item>
      <title>5 ways to deploy Flask</title>
      <link>https://smirnov-am.github.io/deploy-flask/</link>
      <pubDate>Sun, 12 Apr 2020 17:03:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/deploy-flask/</guid>
      <description>In this post, I&amp;rsquo;m going to explore 5 ways to deploy a Flask application. In all examples I&amp;rsquo;m going to use a simple app from Flask docs:
app.py
from flask import Flask app = Flask(__name__) @app.route(&#39;/&#39;) def hello_world(): return &#39;Hello, World!&#39; if __name__ == &#39;__main__&#39;: app.run()  Local machine This option is used when you need to test your application on a local machine. By simply running app.py you spin up a server and can call the endpoints locally, but this particular scenario help when you need to integrate your app with external service.</description>
    </item>
    
    <item>
      <title>Python linters for better code quality</title>
      <link>https://smirnov-am.github.io/python-linters-for-better-code-quality/</link>
      <pubDate>Mon, 04 Nov 2019 20:23:49 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/python-linters-for-better-code-quality/</guid>
      <description>Code quality There are two types of software quality - external and internal. External are the ones that are important to the users of the system. They may include:
 correctness - software behaves as users expect usability - how easy is it to use reliability - the ability to function under any circumstances  Internal quality characteristics are what developers care about:
 maintainability - how easy the software can be modified readability - how easy new developers can understand what code is doing by reading it testability - how easy the systems could be tested to verify that it satisfies the requirements  The internal characteristics relate closely with the quality of the code and design.</description>
    </item>
    
    <item>
      <title>Run Flask on AWS ECS (Fargate)</title>
      <link>https://smirnov-am.github.io/run-flask-on-aws-ecs/</link>
      <pubDate>Wed, 23 Oct 2019 14:26:16 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/run-flask-on-aws-ecs/</guid>
      <description>There is an alternative to run Flask on AWS Elastic Beanstalk that allow numerous customization options - run Flask on ECS Fargate. This serverless (you don&amp;rsquo;t have to manage a cluster of EC2) solution runs Docker images and can run Flask web server. There is a lot of AWS resources involved to make it work. I&amp;rsquo;m sharing CloudFormation templates that will create them automatically.Source code
Here are the details of these templates:</description>
    </item>
    
    <item>
      <title>Static website on AWS S3 with SSL and continuous delivery</title>
      <link>https://smirnov-am.github.io/static-website-on-aws-s3-with-ssl-and-continuous-delivery/</link>
      <pubDate>Tue, 01 Oct 2019 12:41:21 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/static-website-on-aws-s3-with-ssl-and-continuous-delivery/</guid>
      <description>AWS S3 is perfect to host static websites. Basic setup when you have a CNAME DNS record pointing to the bucket endpoint covers a lot of use cases. Couple of things missing are
 SSL continuous delivery.  For SSL you need CloudFront to serve as a global load balancer and provide SSL offload.
To achieve continues delivery connect the GitHub repo storing the source to CodePipeline. CodePipeline is triggered at every push to the master branch and automatically updates the content of the S3 bucket with changes source files.</description>
    </item>
    
    <item>
      <title>Representing money in Python</title>
      <link>https://smirnov-am.github.io/representing-money-in-python/</link>
      <pubDate>Sun, 15 Sep 2019 14:30:10 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/representing-money-in-python/</guid>
      <description>Python&amp;rsquo;s float type is a natural first step to represent monetary amounts in the code. Almost all platforms map Python floats to IEEE-754 “double precision”.
Doubles contain 53 bits of precision. When the machine is trying to represent the fractional part (mantissa) of a given number it finds a bit sequence \(b_1, b_2 ... b_{53}\) so that a sum:
$$ b_1(\frac{1}{2})^{1} + b_2(\frac{1}{2})^{2} + ... + b_{53}(\frac{1}{2})^{53} $$ is close to the number as possible.</description>
    </item>
    
    <item>
      <title>CI/CD  pipeline for AWS Lambda (Python runtime)</title>
      <link>https://smirnov-am.github.io/ci-cd-pipeline-for-aws-lambda-python-runtime/</link>
      <pubDate>Sun, 18 Aug 2019 12:05:36 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/ci-cd-pipeline-for-aws-lambda-python-runtime/</guid>
      <description>Continuous integration and continuous delivery are powerful practices that allow release software faster and of a higher quality. This post walks through steps to implement CI/CD pipeline for a small lambda function that calculates square roots by:
 getting message from SQS that contains the number to calculate sqrt for checks if the calculation was done before by querying DynamoDB if there is not cached answer in DynamoDB - calculate sqrt and saves the result print the result so it&amp;rsquo;s visible in CloudWatch logs  Things I&amp;rsquo;d like the pipeline to do:</description>
    </item>
    
    <item>
      <title>Streaming timeseries with Flask and Plotly</title>
      <link>https://smirnov-am.github.io/streaming-timeseries-with-flask-and-plotly/</link>
      <pubDate>Wed, 12 Dec 2018 18:43:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/streaming-timeseries-with-flask-and-plotly/</guid>
      <description>This post describes simple app for streaming cpu utilization to a web page. It uses Flask as websockets server (flask-socketio plugin), socket.io as client library and plotly.js for visualization.
Flask app Follow flask-socketio doc to create a flask app. SocketIO is going to use Redis as message broker as there will be a separate process that pushes messages to clients. Flask websocket server and this process will communicate through Redis.</description>
    </item>
    
    <item>
      <title>Background jobs with Flask</title>
      <link>https://smirnov-am.github.io/background-jobs-with-flask/</link>
      <pubDate>Tue, 27 Nov 2018 18:41:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/background-jobs-with-flask/</guid>
      <description>Basic request lifecycle with Flask goes like this:
 Flask gets a request is parses input parameters does necessary calculations and finally returns the result  This synchronous task is fine when a user needs the result of calculation immediately. Another use case is when the result is not relevant right now and the user just wants to schedule an execution of the task asynchronously.
Such scenarios include:
 sending an email creating thumbnails from uploaded images starting a calculation for a long CPU intensive task  Common implementation Asynchronous tasks are usually implemented like this:</description>
    </item>
    
    <item>
      <title>Multitenancy with Flask</title>
      <link>https://smirnov-am.github.io/multitenancy-with-flask/</link>
      <pubDate>Fri, 26 Oct 2018 15:59:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/multitenancy-with-flask/</guid>
      <description>What is multi-tenancy Consider a SaaS platform that provide access to multiple client organizations. These organizations - tenants - may have each its own database for safety and data protection reasons. It can be a database on a single RDBMS server or physically different servers. Usually additional central database (i.e., General) stores metadata and list of available tenants.
Flask-SQLAlchemy Flask-SQLAlchemy provides interface only to one database. Flask app configuration defines SQLALCHEMY_DATABASE_URI for connection information for it.</description>
    </item>
    
    <item>
      <title>Flask pagination macro</title>
      <link>https://smirnov-am.github.io/flask-pagination-macro/</link>
      <pubDate>Thu, 27 Sep 2018 15:35:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/flask-pagination-macro/</guid>
      <description>In this post you&amp;rsquo;ll find out how to create a pagination with Jinja macro feature.
Requirements:
 show preconfigured limited number of pages at once collapse invisible pages under ... provide previous/next navigation buttons  Jinja templates for Bootstrap4 I&amp;rsquo;ve created 3 tier structure of Jinja templates to use Bootstrap4.
First - bootstrap4_base.html - loads css and js files from CDN and defines major blocks:
 head - holds content of the &amp;lt;head&amp;gt; tag and defines title, metas, styles body - holds content of the &amp;lt;body&amp;gt; tag and defines navbar, content, scripts navbar - for navigation bar content - for boostrap container (tag with class=&amp;quot;container&amp;quot;) scripts - goes in the end of the body, here is why  Blocks may be extended or/and overwritten in the later templatesThis template follows Bootstrap4 intro guide</description>
    </item>
    
    <item>
      <title>Running Flask in production with Docker</title>
      <link>https://smirnov-am.github.io/running-flask-in-production-with-docker/</link>
      <pubDate>Mon, 13 Aug 2018 15:31:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/running-flask-in-production-with-docker/</guid>
      <description>Google top for running Flask with Docker is full of posts where Flask runs in debug mode. That what logs look like when Flask is in development mode:
 * Serving Flask app &amp;quot;app&amp;quot; (lazy loading) * Environment: production WARNING: Do not use the development server in a production environment. Use a production WSGI server instead. * Debug mode: on * Running on http://0.0.0.0:5555/ (Press CTRL+C to quit)  I&amp;rsquo;d like to make a tutorial on how to run it with uwsgi in Docker using common Docker images.</description>
    </item>
    
    <item>
      <title>Securing Flask web applications</title>
      <link>https://smirnov-am.github.io/securing-flask-web-applications/</link>
      <pubDate>Wed, 11 Jul 2018 15:26:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/securing-flask-web-applications/</guid>
      <description>In this post I&amp;rsquo;d like to investigate security mechanisms available in Flask. I&amp;rsquo;ll go through different types of possible vulnerabilities and the way they can be mitigated.
XSS Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. source
Exploit Consider a form asking for a user input.
&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;/&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;tweet&amp;quot;&amp;gt;&amp;lt;br&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt; &amp;lt;/form&amp;gt;  And a template to show tweets by other users where user input from above form passed unprocessed:</description>
    </item>
    
    <item>
      <title>Using NLTK library with AWS Lambda</title>
      <link>https://smirnov-am.github.io/using-nltk-library-with-aws-lambda/</link>
      <pubDate>Wed, 09 May 2018 15:22:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/using-nltk-library-with-aws-lambda/</guid>
      <description>This is a walk through of the process of creating a simple serverless app for finding part-of-speech tag of an input text.
1 Create virtual environment In order to separate system-wide dependencies from this app, create a separate virtual environment with:
~ mkvirtualenv nltk_env  2 Install nltk In the virtual environment use pip to install nltk package:
(nltk_env) ~ pip install nltk  3 Download nltk data Pip doesn&amp;rsquo;t install additional files that are needed to the app, but nltk has a helper functions to download them:</description>
    </item>
    
    <item>
      <title>Extracting keyphrases from texts: unsupervised algorithm TopicRank</title>
      <link>https://smirnov-am.github.io/keyphrases/</link>
      <pubDate>Mon, 16 Apr 2018 15:17:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/keyphrases/</guid>
      <description>Keyphrase extraction is the task of identifying single or multi-word expressions that represent the main topics of a document. There are 2 approaches to extract topics (and/or keyphrases) from a text: supervised and unsupervised.
Supervised approach This is a multi-label, multi-class classification algorithm, where following features can be used as an input:
 text converted to bag-of-words text is treated as a stream of vectors, which are pre-trained word embeddings  For bag-of-words linear SVM is a good classifier.</description>
    </item>
    
    <item>
      <title>E-commerce recommendation systems: basket analysis.</title>
      <link>https://smirnov-am.github.io/basket-analysis/</link>
      <pubDate>Sun, 08 Apr 2018 12:18:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/basket-analysis/</guid>
      <description>Once novelty recommendation systems are used now by more and more e-commerce sites to help customers find products to purchase. For e-commerce business owners these tools facilitate cross-sales.
Usage Amazon is one of the most prominent organizations that used recommendations to increase sales. According to fortune.com Amazon was able to increase sales by 29% in 2012 as a result of implementing recommendation system. 35% of Amazon’s revenue is generated by its recommendation engine (source).</description>
    </item>
    
  </channel>
</rss>