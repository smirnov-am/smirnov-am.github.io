<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NLP on Alexey Smirnov</title>
    <link>https://smirnov-am.github.io/tags/nlp/</link>
    <description>Recent content in NLP on Alexey Smirnov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; Alexey Smirnov 2021</copyright>
    <lastBuildDate>Wed, 09 May 2018 15:22:00 +0000</lastBuildDate><atom:link href="https://smirnov-am.github.io/tags/nlp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using NLTK library with AWS Lambda</title>
      <link>https://smirnov-am.github.io/using-nltk-library-with-aws-lambda/</link>
      <pubDate>Wed, 09 May 2018 15:22:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/using-nltk-library-with-aws-lambda/</guid>
      <description>This is a walk through of the process of creating a simple serverless app for finding part-of-speech tag of an input text.
1 Create virtual environment In order to separate system-wide dependencies from this app, create a separate virtual environment with:
~ mkvirtualenv nltk_env 2 Install nltk In the virtual environment use pip to install nltk package:
(nltk_env) ~ pip install nltk 3 Download nltk data Pip doesn&amp;rsquo;t install additional files that are needed to the app, but nltk has a helper functions to download them:</description>
    </item>
    
    <item>
      <title>Extracting keyphrases from texts: unsupervised algorithm TopicRank</title>
      <link>https://smirnov-am.github.io/keyphrases/</link>
      <pubDate>Mon, 16 Apr 2018 15:17:00 +0000</pubDate>
      
      <guid>https://smirnov-am.github.io/keyphrases/</guid>
      <description>Keyphrase extraction is the task of identifying single or multi-word expressions that represent the main topics of a document. There are 2 approaches to extract topics (and/or keyphrases) from a text: supervised and unsupervised.
Supervised approach This is a multi-label, multi-class classification algorithm, where following features can be used as an input:
 text converted to bag-of-words text is treated as a stream of vectors, which are pre-trained word embeddings  For bag-of-words linear SVM is a good classifier.</description>
    </item>
    
  </channel>
</rss>
